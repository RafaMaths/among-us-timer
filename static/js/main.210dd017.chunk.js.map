{"version":3,"sources":["components/Header.jsx","components/MainButtons.jsx","sounds/start.mp3","sounds/pause.mp3","sounds/impostor-win.mp3","components/DialPad.jsx","components/Timer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Header","className","Component","sfx","label","sound","MainButtons","soundPlay","bind","renderButtons","src","Howl","volume","play","this","props","startTimer","pauseTimer","stopTimer","map","soundObj","index","type","id","onClick","Howler","DialPad","numbers","i","push","toString","addTime","num","Timer","sec","min","minutes","seconds","App","state","timeIndex","inputTime","convertToNumber","secNumber","parseFloat","minNumber","setState","timerInterval","setInterval","prevState","clearInterval","param","newValue","start","startTimert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.210dd017.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>\n          There is\n          <span className=\"title-spotlight\"> 1 Timer </span>\n          {' '}\n          among us\n        </h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { Howl, Howler } from 'howler';\nimport PropTypes from 'prop-types';\nimport start from '../sounds/start.mp3';\nimport pause from '../sounds/pause.mp3';\nimport stop from '../sounds/impostor-win.mp3';\n\nconst sfx = [\n  { label: 'play', sound: start },\n  { label: 'pause', sound: pause },\n  { label: 'stop', sound: stop },\n];\n\nclass MainButtons extends Component {\n  constructor() {\n    super();\n    this.soundPlay = this.soundPlay.bind(this);\n    this.renderButtons = this.renderButtons.bind(this);\n  }\n\n  soundPlay(src) {\n    const sound = new Howl({\n      src,\n      volume: 0.5,\n    });\n    sound.play();\n  }\n\n  renderButtons() {\n    const { startTimer, pauseTimer, stopTimer } = this.props;\n    return sfx.map((soundObj, index) => (\n      <button\n        type=\"button\"\n        key={ index }\n        id={ `${soundObj.label}-btn` }\n        className={ `fas fa-${soundObj.label}` }\n        onClick={ () => {\n          this.soundPlay(soundObj.sound);\n          if (soundObj.label === 'play') {\n            startTimer();\n          }\n          if (soundObj.label === 'pause') {\n            pauseTimer();\n          }\n          if (soundObj.label === 'stop') {\n            stopTimer();\n          }\n        } }\n      >\n        {' '}\n      </button>\n    ));\n  }\n\n  render() {\n    const VOLUME = 0.1;\n    Howler.volume(VOLUME);\n    return (\n      <div className=\"main-buttons\">\n        {this.renderButtons()}\n      </div>);\n  }\n}\n\nMainButtons.propTypes = {\n  play: PropTypes.func,\n  pause: PropTypes.func,\n  // stop: PropTypes.func,\n}.isRequired;\n\nexport default MainButtons;\n","export default __webpack_public_path__ + \"static/media/start.c8149644.mp3\";","export default __webpack_public_path__ + \"static/media/pause.895d2f7f.mp3\";","export default __webpack_public_path__ + \"static/media/impostor-win.a3cf6271.mp3\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass DialPad extends Component {\n  render() {\n    const numbers = [];\n    const MAX = 10;\n    for (let i = 1; i < MAX; i += 1) {\n      numbers.push(i.toString());\n    }\n    const { addTime } = this.props;\n    return (\n      <div className=\"dial-pad-buttons\">\n        {numbers.map((num) => (\n          <button\n            type=\"button\"\n            key={ num }\n            onClick={ () => addTime(num) }\n          >\n            { num }\n          </button>\n        ))}\n        <button type=\"button\" key=\"del\" className=\"fas fa-backspace\" id=\"del\"> </button>\n        <button type=\"button\" key={ 0 } onClick={ () => addTime('0') }>0</button>\n        <button type=\"button\" key=\"clear\" id=\"clear\">C</button>\n      </div>);\n  }\n}\n\nDialPad.propTypes = {\n  addTime: PropTypes.func,\n}.isRequired;\n\nexport default DialPad;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DialPad from './DialPad';\n\nclass Timer extends Component {\n  render() {\n    const { sec, min, addTime } = this.props;\n    const TEN = 10;\n    const minutes = min < TEN ? `0${min}` : min;\n    const seconds = sec < TEN ? `0${sec}` : sec;\n    return (\n      <div className=\"main-container\">\n        <div className=\"timer-container\">\n          <span className=\"timer\">\n            {` ${minutes}:${seconds}`}\n          </span>\n        </div>\n        <div className=\"dial-pad-container\">\n          <DialPad addTime={ addTime } />\n        </div>\n        {/* <button type=\"button\" onClick={ this.startTimer }>start</button>\n        <button type=\"button\" onClick={ this.pauseTimer }>pause</button> */}\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  onChangeFunc: PropTypes.func,\n  addTime: PropTypes.func,\n  sec: PropTypes.number,\n  min: PropTypes.number,\n}.isRequired;\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MainButtons from './components/MainButtons';\nimport Timer from './components/Timer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n      minutes: 0,\n      timeIndex: 3,\n      inputTime: ['0', '0', '0', '0'],\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.pauseTimer = this.pauseTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.addTime = this.addTime.bind(this);\n    this.convertToNumber = this.convertToNumber.bind(this);\n  }\n\n  componentDidMount() {\n\n  }\n\n  convertToNumber() {\n    const { inputTime } = this.state;\n    const secNumber = parseFloat(inputTime[2] + inputTime[3]);\n    const minNumber = parseFloat(inputTime[0] + inputTime[1]);\n\n    // limit seconds value in 60;\n\n    this.setState({\n      seconds: secNumber,\n      minutes: minNumber,\n    });\n  }\n\n  startTimer() {\n    this.convertToNumber();\n    const ONE_SECOND = 1000;\n    this.timerInterval = setInterval(() => {\n      const { seconds, minutes } = this.state;\n      if (seconds === 0 && minutes === 0) {\n        this.stopTimer();\n      }\n      if (seconds < 1) {\n        this.setState((prevState) => ({ minutes: prevState.minutes - 1, seconds: 59 }));\n      } else {\n        this.setState((prevState) => ({ seconds: prevState.seconds - 1 }));\n      }\n    }, ONE_SECOND);\n  }\n\n  pauseTimer() {\n    clearInterval(this.timerInterval);\n  }\n\n  stopTimer() {\n    clearInterval(this.timerInterval);\n    this.setState({\n      seconds: 0,\n      minutes: 0,\n      timeIndex: 3,\n    });\n  }\n\n  // ------- rebuild addTime function\n  addTime(param) {\n    const { inputTime, timeIndex } = this.state;\n    const newValue = inputTime;\n    const maxSize = 3;\n    if (timeIndex === maxSize) {\n      newValue[timeIndex] = param;\n    }\n    if (timeIndex === 2) {\n      newValue[timeIndex] = newValue[timeIndex + 1];\n      newValue[timeIndex + 1] = param;\n    }\n    if (timeIndex === 1) {\n      newValue[timeIndex] = newValue[timeIndex + 1];\n      newValue[timeIndex + 1] = newValue[timeIndex + 2];\n      newValue[timeIndex + 2] = param;\n    }\n    if (timeIndex === 0) {\n      newValue[timeIndex] = newValue[timeIndex + 1];\n      newValue[timeIndex + 1] = newValue[timeIndex + 2];\n      newValue[timeIndex + 2] = newValue[timeIndex + maxSize];\n      newValue[timeIndex + maxSize] = param;\n    }\n\n    this.convertToNumber();\n    this.setState((prevState) => ({\n      inputTime: newValue,\n      timeIndex: prevState.timeIndex - 1,\n    }));\n  }\n\n  render() {\n    const { seconds, minutes } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <Timer\n          sec={ seconds }\n          min={ minutes }\n          addTime={ this.addTime }\n          start={ this.startTimert }\n        />\n        <MainButtons\n          startTimer={ this.startTimer }\n          pauseTimer={ this.pauseTimer }\n          stopTimer={ this.stopTimer }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}